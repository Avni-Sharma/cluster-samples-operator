// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cluster-samples-operator/pkg/apis/samplesresource/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSamplesResources implements SamplesResourceInterface
type FakeSamplesResources struct {
	Fake *FakeSamplesresourceV1alpha1
}

var samplesresourcesResource = schema.GroupVersionResource{Group: "samplesresource.operator.openshift.io", Version: "v1alpha1", Resource: "samplesresources"}

var samplesresourcesKind = schema.GroupVersionKind{Group: "samplesresource.operator.openshift.io", Version: "v1alpha1", Kind: "SamplesResource"}

// Get takes name of the samplesResource, and returns the corresponding samplesResource object, and an error if there is any.
func (c *FakeSamplesResources) Get(name string, options v1.GetOptions) (result *v1alpha1.SamplesResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(samplesresourcesResource, name), &v1alpha1.SamplesResource{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SamplesResource), err
}

// List takes label and field selectors, and returns the list of SamplesResources that match those selectors.
func (c *FakeSamplesResources) List(opts v1.ListOptions) (result *v1alpha1.SamplesResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(samplesresourcesResource, samplesresourcesKind, opts), &v1alpha1.SamplesResourceList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SamplesResourceList{ListMeta: obj.(*v1alpha1.SamplesResourceList).ListMeta}
	for _, item := range obj.(*v1alpha1.SamplesResourceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested samplesResources.
func (c *FakeSamplesResources) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(samplesresourcesResource, opts))
}

// Create takes the representation of a samplesResource and creates it.  Returns the server's representation of the samplesResource, and an error, if there is any.
func (c *FakeSamplesResources) Create(samplesResource *v1alpha1.SamplesResource) (result *v1alpha1.SamplesResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(samplesresourcesResource, samplesResource), &v1alpha1.SamplesResource{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SamplesResource), err
}

// Update takes the representation of a samplesResource and updates it. Returns the server's representation of the samplesResource, and an error, if there is any.
func (c *FakeSamplesResources) Update(samplesResource *v1alpha1.SamplesResource) (result *v1alpha1.SamplesResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(samplesresourcesResource, samplesResource), &v1alpha1.SamplesResource{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SamplesResource), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSamplesResources) UpdateStatus(samplesResource *v1alpha1.SamplesResource) (*v1alpha1.SamplesResource, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(samplesresourcesResource, "status", samplesResource), &v1alpha1.SamplesResource{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SamplesResource), err
}

// Delete takes name of the samplesResource and deletes it. Returns an error if one occurs.
func (c *FakeSamplesResources) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(samplesresourcesResource, name), &v1alpha1.SamplesResource{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSamplesResources) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(samplesresourcesResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.SamplesResourceList{})
	return err
}

// Patch applies the patch and returns the patched samplesResource.
func (c *FakeSamplesResources) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SamplesResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(samplesresourcesResource, name, data, subresources...), &v1alpha1.SamplesResource{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SamplesResource), err
}
